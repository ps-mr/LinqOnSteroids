package ivm.expressiontree
import annotation.switch

<%
  escapeMarkup = false
  val minTupleArity = 2
  val maxArity = 11
  val commaSpace = ", "
  def baseParLoop(arity: Int)(formatter: Int => String, sep: String = commaSpace) = (1 to arity) map formatter mkString sep
  def defParamsLoop(arity: Int)(sep: String)(formatStr: String) = baseParLoop(arity)(formatStr format _, sep)
  var pIdx = -1
  def defParamsLoopFunc(arity: Int)(sep: String)(body: => Unit) = {
    pIdx = 1
    while (pIdx <= arity) {
      body
      pIdx += 1
    }
  }
  def defParamsLoops(arity: Int) =
    (defParamsLoop(arity) _, (defParamsLoop(arity)(commaSpace)(_)), defParamsLoopFunc(arity) _)

  val tpPfx = "A"
  val argPfx = "t"

  var (paramsLoop, paramsLoopComma, foreachParam) = defParamsLoops(0)

  //These refer to mutable variables, hence must be definitions!
  def tparams = paramsLoopComma(tpPfx + "%d")
  val paramTempl = argPfx + "%d: Exp[" + tpPfx + "%<d]"
  def paramsDecl = paramsLoopComma(paramTempl)
  def paramsDeclOverride = paramsLoopComma("override val " + paramTempl)
  def params = paramsLoopComma(argPfx + "%d")
  def interpretParams = paramsLoopComma(argPfx + "%d.interpret()")
%>
#for (arity <- 1 to maxArity)
<% val p = defParamsLoops(arity); paramsLoop = p._1; paramsLoopComma = p._2 %>
///////////////////////////////////////////////////
// SUPPORT FOR OPERATION NODES OF ARITY ${arity} //
///////////////////////////////////////////////////

//Passing Self allows to prevent statically the only boilerplate-related copy-n-paste bug in defining tree classes.
trait Arity${arity}OpTrait[${paramsLoopComma("A%d <: Exp[_]")}, +R, +Self <: Def[R]] extends Def[R] {<%--
  //Ensure that Self is actually correct: --%>
  this: Self =>
  ${paramsLoop("\n  ")("def " + argPfx + "%d: A%<d")}
  override def nodeArity = ${arity}
  def children = List(${params})
  override protected def checkedGenericConstructor(v: List[Exp[_]]) =
    copy(${baseParLoop(arity)(i => "v(%d).asInstanceOf[A%d]" format (i - 1, i))})
<%--
  //Ensure that copy returns the correct type. --%>
  def copy(${paramsLoopComma(argPfx + "%d: A%<d")}): Self
}

trait Arity${arity}OpExpTrait[${tparams}, +R, +Self <: Def[R]]
  extends Arity${arity}OpTrait[${paramsLoopComma("Exp[" + tpPfx + "%d]")}, R, Self] {
  this: Self =>
}

abstract class Arity${arity}Op[${paramsLoopComma(tpPfx + "%d <: Exp[_]")}, +R, +Self <: Def[R]](${paramsLoopComma("val " + argPfx + "%d: A%<d")}) extends Arity${arity}OpTrait[${tparams}, R, Self] {
  this: Self =>
}
<%--
Should this inherit from Arity2OpExpTrait or from Arity2Op? Does it matter? I hope not - these classes should
stay an implementation detail.
--%>
abstract class Arity${arity}OpExp[${tparams}, +R, +Self <: Def[R]](${paramsDeclOverride})
  extends Arity${arity}Op[${paramsLoopComma("Exp[" + tpPfx + "%d]")}, R, Self](${params}) {
  this: Self =>
}

/////////////////////////////////////////
// SUPPORT FOR CALLs OF ARITY ${arity} //
/////////////////////////////////////////

case class Call${arity}[${tparams}, Res](/*val*/ name: Symbol, restId: Symbol, callfunc: (${tparams}) => Res, ${paramsDeclOverride})
    extends Arity${arity}OpExp[${tparams}, Res, Call${arity}[${tparams}, Res]](${params}) with Call[Res] {
  def copy(${paramsDecl}) = Call${arity}(name, restId, callfunc, ${params})
  def interpret() = callfunc(${interpretParams})
}

#end <%-- //We close and reopen the loop because there are no unary tuples. --%>

#for (arity <- minTupleArity to maxArity)
<% val p = defParamsLoops(arity); paramsLoop = p._1; paramsLoopComma = p._2 %>
//////////////////////////////////////////
// SUPPORT FOR TUPLES OF ARITY ${arity} //
//////////////////////////////////////////
<%-- XXX: share code between the two following classes, too much code is duplicated (also in the output). --%>
case class LiftProduct${arity}[${tparams}](${paramsDeclOverride}) extends Arity${arity}OpExp[${tparams}, Product${arity}[${tparams}], LiftProduct${arity}[${tparams}]](${params}) with ExpProduct with PrefixPrinting {
  def copy(${paramsDecl}) = LiftProduct${arity}(${params})
  def interpret() = (${interpretParams})
  def metaProductArity: Int = ${arity}
  def metaProductElement(n: Int): Exp[Any] = (n: @switch) match {
    ${baseParLoop(arity)(i => "case %d => %s%d" format (i - 1, argPfx, i), "\n    ")}
  }
  def prefix = ""
}

case class LiftTuple${arity}[${tparams}](${paramsDeclOverride}) extends Arity${arity}OpExp[${tparams}, (${tparams}), LiftTuple${arity}[${tparams}]](${params}) with ExpProduct with PrefixPrinting {
  def copy(${paramsDecl}) = LiftTuple${arity}(${params})
  def interpret() = (${interpretParams})
  def metaProductArity: Int = ${arity}
  def metaProductElement(n: Int): Exp[Any] = (n: @switch) match {
    ${baseParLoop(arity)(i => "case %d => %s%d" format (i - 1, argPfx, i), "\n    ")}
  }
  def prefix = ""
}

#for (i <- 1 to arity)
case class Product${arity}Proj${i}[${tparams}](p: Exp[Product${arity}[${tparams}]]) extends Arity1OpExp[Product${arity}[${tparams}], A${i}, Product${arity}Proj${i}[${tparams}]](p) with
  ExpSelection[Product${arity}[${tparams}]] with InfixPrinting
{
  val body: (Int, Int, Exp[Product${arity}[${tparams}]]) = (${arity}, ${i}, p)
  def copy(p: Exp[Product${arity}[${tparams}]]) = Product${arity}Proj${i}(p)
  def interpret() = p.interpret()._${i}
  def operator = "_${i}"
}
#end

#end
////////////////////////////////////////////////
// SUPPORT FOR TUPLES - AUTOMATIC CONVERSIONS //
////////////////////////////////////////////////
trait AutoTupleOpsLangIntf {
  this: LiftingConvsLangIntf =>
#for (arity <- minTupleArity to maxArity)
  ////////////////////////////////////////////
  // AUTOMATIC CONVERSIONS - ARITY ${arity} //
  ////////////////////////////////////////////
  <% val p = defParamsLoops(arity); paramsLoop = p._1; paramsLoopComma = p._2; foreachParam = p._3 %>

  implicit def tuple${arity}ToTuple${arity}Exp[${tparams}](tuple: (${paramsLoopComma("Rep[" + tpPfx + "%d]")})): Exp[(${tparams})]

  implicit def product${arity}ToProduct${arity}Exp[${tparams}](tuple: Product${arity}[${paramsLoopComma("Rep[" + tpPfx + "%d]")}]): Exp[Product${arity}[${tparams}]]

  abstract class Product${arity}Ops[${tparams}] {
<% foreachParam("\n    ") { %>
    def _${pIdx}: Rep[${tpPfx}${pIdx}]
<% } %>
    def metaProductArity: Int
    def metaProductElement(n: Int): Rep[Any]
  }

  implicit def toProduct${arity}Ops[${tparams}](e: Rep[Product${arity}[${tparams}]]): Product${arity}Ops[${tparams}]
#end
}

trait AutoTupleOps extends AutoTupleOpsLangIntf {
  this: LiftingConvs =>
#for (arity <- minTupleArity to maxArity)
  ////////////////////////////////////////////
  // AUTOMATIC CONVERSIONS - ARITY ${arity} //
  ////////////////////////////////////////////
  <% val p = defParamsLoops(arity); paramsLoop = p._1; paramsLoopComma = p._2; foreachParam = p._3 %>

  implicit def tuple${arity}ToTuple${arity}Exp[${tparams}](tuple: (${paramsLoopComma("Exp[" + tpPfx + "%d]")})): Exp[(${tparams})] =
    LiftTuple${arity}[${tparams}](${paramsLoopComma("tuple._%d")})

  implicit def product${arity}ToProduct${arity}Exp[${tparams}](tuple: Product${arity}[${paramsLoopComma("Exp[" + tpPfx + "%d]")}]): Exp[Product${arity}[${tparams}]] =
    LiftProduct${arity}[${tparams}](${paramsLoopComma("tuple._%d")})

  class Product${arity}Ops[${tparams}](p: Exp[Product${arity}[${tparams}]]) extends super.Product${arity}Ops[${tparams}] {
<% foreachParam("\n    ") { %>
    def _${pIdx}: Exp[${tpPfx}${pIdx}] = p match {
      case Sym(LiftTuple${arity}(${params})) => ${argPfx}${pIdx}
      case _ => Product${arity}Proj${pIdx}(p)
    }

<% } %>
    def metaProductArity: Int = ${arity}

    def metaProductElement(n: Int): Exp[Any] = (n: @switch) match {
      ${baseParLoop(arity)(i => "case %d => Product%dProj%d(p)" format (i - 1, arity, i), "\n      ")}
    }
  }

  implicit def toProduct${arity}Ops[${tparams}](e: Exp[Product${arity}[${tparams}]]): Product${arity}Ops[${tparams}] = new Product${arity}Ops(e)
#end
}

trait AutoFunctionOpsLangIntf {
  this: LiftingConvsLangIntf =>
#for (arity <- 1 to maxArity)
  <% val p = defParamsLoops(arity); paramsLoop = p._1; paramsLoopComma = p._2; foreachParam = p._3 %>

  def fmap[${tparams}, Res](${paramsDecl}, restId: Symbol)
      (name: Symbol, f: (${tparams}) => Res): Rep[Res]

  def fmap[${tparams}, Res](${paramsDecl})
      (name: Symbol, f: (${tparams}) => Res): Rep[Res]
#end
}

trait AutoFunctionOps extends AutoFunctionOpsLangIntf {
  this: LiftingConvs =>
#for (arity <- 1 to maxArity)
  <% val p = defParamsLoops(arity); paramsLoop = p._1; paramsLoopComma = p._2; foreachParam = p._3 %>

  def fmap[${tparams}, Res](${paramsDecl}, restId: Symbol)
      (name: Symbol, f: (${tparams}) => Res): Exp[Res] =
    new Call${arity}(name, restId, f, ${params})

  def fmap[${tparams}, Res](${paramsDecl})
      (name: Symbol, f: (${tparams}) => Res): Exp[Res] =
    fmap(${params}, Symbol(""))(name, f)
#end
}


<%
def nothingN(arity: Int) = Seq.fill(arity)("Nothing") mkString ", "
%>
object TupleSupport extends AutoTupleOps with LiftingConvs {
  def projectionTo[T](e: Var, arity: Int, idx: Int): Exp[T] =
    ((arity: @switch) match {
#for (arity <- minTupleArity to maxArity)
      case ${arity} => toProduct${arity}Ops(e.asInstanceOf[Exp[(${nothingN(arity)})]]).metaProductElement(idx)
#end
    }).asInstanceOf[Exp[T]]
}

object TupleSupport2 {
  def projectionTo[T](e: Var, arity: Int, idx: Int): Exp[T] =
    (arity: @switch) match {
      case 1 =>
        idx match {
          case 0 => (e: Exp[_]).asInstanceOf[Exp[Nothing]]
        }
#for (arity <- minTupleArity to maxArity)
      case ${arity} =>
        (idx: @switch) match {
          ${baseParLoop(arity)(i => "case %d => Product%dProj%d[%s]((e: Exp[_]).asInstanceOf[Exp[(%<s)]])" format (i - 1, arity, i, nothingN(arity)), "\n          ")}
        }
#end
    }
  def toTuple(exps: Seq[Exp[_]]): Exp[_] = {
    val arity = exps.length
    (arity: @switch) match {
      case 0 => Const(())
      case 1 => exps(0)
#for (arity <- minTupleArity to maxArity)
      case ${arity} => LiftTuple${arity}(${baseParLoop(arity)(i => "exps(%d)" format i - 1)})
#end
    }
  }
}

object OverloadHack {
#for (i <- 1 to 30)
  class Overloaded${i}
  implicit val overloaded${i} = new Overloaded${i}
#end
}
