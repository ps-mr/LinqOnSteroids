#import(ivm.generation.ScalaSigHelpers)
#import(ScalaSigHelpers._)
#import(scala.tools.scalap.scalax.util.StringUtil)
#import(tools.scalap.scalax.rules.scalasig.MethodSymbol)<%@
val classFile: String %>
<% val className = classFile.split("\\.").last %>
  implicit def expTo${className}Ops(t: Exp[${className}]) = new ${className}Ops(t)
  implicit def to${className}Ops(t: ${className}) = new ${className}Ops(t)
  class ${className}Ops(t: Exp[${className}]) {
<% val scalaSig = getScalaSig(classFile)
   val classSymbol = scalaSig.topLevelClasses.head
   val fil: MethodSymbol => Boolean = s => !(s.name == "<init>" || s.isOverride || s.isPrivate || s.isProtected || s.isSynthetic || s.name.contains("$"))
   val symbols = getMethodSymbols(classSymbol, fil)
   var i = 0
   val caseClassArity = getCaseAccessors(classSymbol, fil).length
   symbols foreach { n => %>
    def ${n.name}${unescape(getTypeParameters(n))}${getParametersAsString(n)}: ${getResultType(n)} = new ${className}_${n.name}${i}(t${getParameterNamesAsString(n, ",", "")})
<% i = i+1 } %>
  }
<% i = 0
   var caseClassSelectorIdx = 0
   symbols foreach { n =>
     val wName = className + "_" + n.name + i
     val paramsDef = getParametersAsString(n, true, ",", "", ",", implicits = false)
     val paramsToPass = getParameterNamesAsString(n, ",", "")
     val paramTypes = getParameterNamesAsString(n, ",", "")
     val arity = getNumberOfParameters(n) + 1
     if (n.isCaseAccessor)
       caseClassSelectorIdx += 1
     val resultType = getResultType(n, false)
     val isResultSeq = resultType startsWith ScalaSigHelpers.replacementSeqType
%>
  case class ${wName}${unescape(getTypeParameters(n))}(t: Exp[${className}]${paramsDef}) extends Arity${arity}Op[Exp[${className}]${getParameterTypesAsString(n, ",", "")},${resultType},${wName}${getTypeArgs(n)}](t${paramTypes}) with InfixPrinting<%
  if (n.isCaseAccessor) {
    %> with ExpSelection[${className}]<%
  } %> {
    def interpret() = t.interpret().${n.name}${getParameterNamesAsString(n, transform = x => x + ".interpret()")}
    def operator = "${n.name + (if (isResultSeq) ".toSeq" else "")}"
    def copy(t: Exp[${className}]${paramsDef}) = new ${wName}(t${paramsToPass})<%
      if (n.isCaseAccessor) {%>

    def body = (<%=caseClassArity%>, <%=caseClassSelectorIdx%>, t)
<% } %>
  }
<% i = i+1 } %>

<%
  if (classSymbol.isCase) {
    val constructors = getMethodSymbols(classSymbol, _.name == "<init>")

    //Make the next line part of the template to dump the types of constructors.
    /*${unescape(constructors)}, ${unescape(constructors.map(_.infoType))} */

    //Abstract this away!!
    //StringUtil.trimStart(sigp.processName(path) + sigp.typeArgString(typeArgs), "<empty>.")
    val path = StringUtil.cutSubstring(classSymbol.path)(".package")
    val fullClassName = StringUtil.trimStart(sigp.processName(path), "<empty>.")

    i = 0
    constructors foreach { n =>
      val wrapperClassName = className + "Exp" + i
      %>

  case class ${wrapperClassName}${unescape(getTypeParameters(n))}${getParametersAsString(n)}
    extends Arity${caseClassArity}Op[${getParameterTypesAsString(n, "", "")}, ${className}, ${wrapperClassName}${unescape(getTypeParameters(n))}]${getParameterNamesAsString(n)} with ExpProduct with PrefixPrinting {
    def copy${getParametersAsString(n)} = ${wrapperClassName}${getParameterNamesAsString(n)}
    def interpret() = ${fullClassName}${getParameterNamesAsString(n, transform = x => x + ".interpret()")}
    def prefix = "${fullClassName}"
    def metaProductArity = ${caseClassArity}
    def metaProductElement(n: Int): Exp[Any] = (n: @switch) match {
#for (pos <- 0 to caseClassArity - 1)
      case ${pos} => t${pos + 1}
#end
    }
  }
  def ${className}${getParametersAsString(n)} = ${wrapperClassName}${getParameterNamesAsString(n)}
<% i += 1 }
  } %>
