//XXX: ivm.expressiontree is very much not the right place! Not clear which is the right one
// (something like de.tud.cs.st.bat.resolved.lifted? Something configured?) PG
package ivm
package expressiontree

import ivm._

import de.tud.cs.st.bat.resolved
import resolved._
import Lifting._
import ivm.expressiontree._<%--


--%>
#import(ivm.generation.ScalaSigHelpers._)<%--

--%>
object BATLifting {
<%--
<% for (c <- List("ClassFile", "ClassMember")) {
  render("WrappedClassInlined.ssp", Map("classFile" -> ("de.tud.cs.st.bat.resolved." + c)))} %>
--%>
<% for(c <- List("ClassFile", "ObjectType", "Field", "Method",
	         "MethodDescriptor", "Code", "ExceptionHandler")) {
  render("WrappedClass.ssp", Map("classFile" -> ("de.tud.cs.st.bat.resolved." + c)))} %>
<%--
<%
  val classLoader = Thread.currentThread().getContextClassLoader()
  val path = "de.tud.cs.st.bat.resolved".replace('.', '/')
  val resources = classLoader.getResources(path)
  //val classes = getClassesInPackage("de.tud.cs.st.bat.resolved")
  //for (c <- classes) {
  //  render("WrappedClass.ssp", Map("classFile" -> c))
  %>
  //${resources.length}
--%>
  implicit def expToClassMemberOps(t: Exp[ClassMember]) = new ClassMemberOps(t)
  class ClassMemberOps(t: Exp[ClassMember]) {
    def isPublic: Exp[scala.Boolean] = new isPublic
    def isProtected: Exp[scala.Boolean] = new IsProtected
    def isPrivate: Exp[scala.Boolean] = new IsPrivate
    def isStatic: Exp[scala.Boolean] = new IsStatic
    def isFinal: Exp[scala.Boolean] = new IsFinal

    class isPublic extends Arity0Exp[scala.Boolean] {
      def interpret() = t.interpret().isPublic
    }
    class IsProtected extends Arity0Exp[scala.Boolean] {
      def interpret() = t.interpret().isProtected
    }
    class IsPrivate extends Arity0Exp[scala.Boolean] {
      def interpret() = t.interpret().isPrivate
    }
    class IsStatic extends Arity0Exp[scala.Boolean] {
      def interpret() = t.interpret().isStatic
    }
    class IsFinal extends Arity0Exp[scala.Boolean] {
      def interpret() = t.interpret().isFinal
    }

  }

}
